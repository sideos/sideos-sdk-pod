// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name idenfycore
import CommonCrypto
import Foundation
import Security
import Swift
import UIKit
import _Concurrency
@_exported import idenfycore
@_hasMissingDesignatedInitializers public class JMUnidecode {
  public static func preload()
  public static func unidecode(_ string: Swift.String) -> Swift.String
  @objc deinit
}
public enum Status {
  case SUCCESS
  case ERROR
  case LOADING
  public static func == (a: idenfycore.Status, b: idenfycore.Status) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers public class RequestModel<T> : ObjectiveC.NSObject where T : Swift.Decodable {
  public func withPath(_ path: Swift.String) -> idenfycore.RequestModel<T>
  public func withCustomPath(_ customPath: Swift.String) -> idenfycore.RequestModel<T>
  public func withParameters(_ parameters: [Swift.String : Any?]) -> idenfycore.RequestModel<T>
  public func withHeaders(_ headers: [Swift.String : Swift.String]) -> idenfycore.RequestModel<T>
  public func withBearerToken(_ bearerToken: Swift.String) -> idenfycore.RequestModel<T>
  public func withBody(_ body: [Swift.String : Any?]) -> idenfycore.RequestModel<T>
  public func withCustomBody(_ customBody: Foundation.Data) -> idenfycore.RequestModel<T>
  public func withHTTPMethod(_ method: idenfycore.RequestHTTPMethod) -> idenfycore.RequestModel<T>
  public func build() -> idenfycore.RequestModel<T>
  @objc override dynamic public init()
  @objc deinit
}
public class APIhelper {
  public init()
  public func getRequestBody(type: Swift.String, url: Foundation.URL) -> Foundation.URLRequest
  public func getMultipartRequestBody(type: Swift.String, url: Foundation.URL, boundary: Swift.String) -> Foundation.URLRequest
  public func formS3PhotoData(_ presignedUrlModel: idenfycore.PresignedUrlModel, _ step: Swift.String, _ data: Foundation.Data, _ boundary: Swift.String) -> Foundation.Data
  public func formBackgroundPhotoData(_ presignedUrlModel: idenfycore.PresignedUrlModel, _: Swift.String, _ zip: Foundation.URL, _ boundary: Swift.String) -> Foundation.Data
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ServiceManager {
  public static let shared: idenfycore.ServiceManager
  public var session: Foundation.URLSession
  public var errorFormatingClass: idenfycore.ErrorFormatingClass!
  public func requestWithResponse<T>(networkRetryingStore: idenfycore.NetworkRetryingStore, request: idenfycore.RequestModel<T>, result: @escaping (Swift.Result<T?, idenfycore.ErrorResponse>) -> Swift.Void) where T : Swift.Decodable
  public func setErrorFormatter(errorFormatingClass: idenfycore.ErrorFormatingClass)
  @objc deinit
}
public class PartnerInfo {
  public var country: idenfycore.IssuingCountryInPartnerInfo
  public var zoomLiveliness: Swift.Bool
  public var residencePermitAndIdCard: Swift.Bool
  public var countriesBlacklist: [Swift.String]
  public var recordIdentification: Swift.Bool
  public var canUpload: Swift.Bool
  public var showDocumentsSelection: Swift.Bool
  public var personalisation: idenfycore.PartnerInfo.Personalisation
  public var ReviewSuccessful: Swift.Bool
  public var ReviewFailed: Swift.Bool
  public var showInstruction: Swift.Bool
  public var useZoomIdCheck: Swift.Bool
  public var skipCountrySelection: Swift.Bool
  public var skipDocumentOnboarding: Swift.Bool
  public var skipDocumentSelection: Swift.Bool
  public var skipWaitingForResults: Swift.Bool
  public var skipSelfieWithLiveness: Swift.Bool
  public var nfcRequired: Swift.Bool
  public var providerSelectionRequired: Swift.Bool
  public var waitForStepUpload: Swift.Bool
  public var shouldDetectFace: Swift.Bool
  public var shouldDetectEyes: Swift.Bool
  public var isSdkWhiteLabeled: Swift.Bool
  public var isSdkFullCustomization: Swift.Bool
  public var locale: Swift.String
  public var smartEngines: Swift.Bool
  public var scanRef: Swift.String
  public var isQuestionnaireEnabled: Swift.Bool
  public var environment: idenfycore.EnvironmentEnum
  public struct Personalisation {
    public var immediateRedirect: Swift.Bool
    public var showIdenfyWaterMark: Swift.Bool
    public var supportEmail: Swift.String
    public var showPrivacyPolicy: Swift.Bool
    public var privacyPolicyViews: idenfycore.PrivacyPolicy?
    public init(immediateRedirect: Swift.Bool, showIdenfyWaterMark: Swift.Bool, supportEmail: Swift.String, showPrivacyPolicy: Swift.Bool, privacyPolicyViews: idenfycore.PrivacyPolicy?)
  }
  public init(country: idenfycore.IssuingCountryInPartnerInfo, zoomLiveliness: Swift.Bool, residencePermitAndIdCard: Swift.Bool, countriesBlacklist: [Swift.String], recordIdentification: Swift.Bool, canUpload: Swift.Bool, showDocumentsSelection: Swift.Bool, personalisation: idenfycore.PartnerInfo.Personalisation, ReviewSuccessful: Swift.Bool, ReviewFailed: Swift.Bool, showInstruction: Swift.Bool, useZoomIdCheck: Swift.Bool, skipCountrySelection: Swift.Bool, skipDocumentOnboarding: Swift.Bool, skipDocumentSelection: Swift.Bool, skipWaitingForResults: Swift.Bool, skipSelfieLiveness: Swift.Bool, nfcRequired: Swift.Bool, providerSelectionRequired: Swift.Bool, waitForStepUpload: Swift.Bool, shouldDetectFace: Swift.Bool, shouldDetectEyes: Swift.Bool, isSdkWhiteLabeled: Swift.Bool, isSdkFullCustomization: Swift.Bool, locale: Swift.String, smartEngines: Swift.Bool, scanRef: Swift.String, isQuestionnaireEnabled: Swift.Bool, environment: idenfycore.EnvironmentEnum)
  @objc deinit
}
extension idenfycore.Throwable {
  public var value: T? {
    get
  }
}
public enum Throwable<T> : Swift.Decodable where T : Swift.Decodable {
  case failure(Swift.Error)
  case success(T)
  public init(from decoder: Swift.Decoder) throws
}
public struct LivelinessLicense : Swift.Codable {
  public let expiryDate: Swift.String
  public let key: Swift.String
  public let appId: Swift.String
  public init(_ expiryDate: Swift.String, _ key: Swift.String, appId: Swift.String)
  public func getFormattedAsLicense() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.Int {
  public var isSuccessHTTPCode: Swift.Bool {
    get
  }
}
@objc public enum EnvironmentEnum : Swift.Int {
  case development
  case production
  case freemium
  case demo
  case demoMobile
  case testing
  public typealias RawValue = Swift.String
  public var rawValue: idenfycore.EnvironmentEnum.RawValue {
    get
  }
  public init?(rawValue: idenfycore.EnvironmentEnum.RawValue)
}
public class StepStatusClass {
  public var step: Swift.String
  public var status: idenfycore.Status
  public init(step: Swift.String)
  @objc deinit
}
public class PresignedUrlModel {
  public var url: Swift.String
  public var key: Swift.String
  public var AWSAccessKeyId: Swift.String
  public var policy: Swift.String
  public var signature: Swift.String
  public init(with dictionary: [Swift.String : Any]?)
  @objc deinit
}
public enum DocumentNameUIViewModel : Swift.Equatable {
  case DocumentNameKnown(name: Swift.String)
  case DocumentNameUnknown(name: Swift.String)
  public static func == (a: idenfycore.DocumentNameUIViewModel, b: idenfycore.DocumentNameUIViewModel) -> Swift.Bool
}
public enum IdenfyDecodableValue : Swift.Decodable {
  case int(Swift.Int), string(Swift.String), bool(Swift.Bool), stringArray([Swift.String])
  public init(from decoder: Swift.Decoder) throws
  public var intValue: Swift.Int? {
    get
  }
  public var stringValue: Swift.String? {
    get
  }
  public var boolValue: Swift.Bool? {
    get
  }
  public var stringArrayValue: [Swift.String]? {
    get
  }
}
public class PartnerInfoDTO : Swift.Decodable {
  public var country: Swift.String?
  public var zoomLiveliness: Swift.Bool
  public var residencePermitAndIdCard: Swift.Bool
  public var countriesBlacklist: [Swift.String]?
  public var recordIdentification: Swift.Bool
  public var canUpload: Swift.Bool
  public var showDocumentsSelection: Swift.Bool
  public var personalisation: idenfycore.PartnerInfoDTO.Personalisation?
  public var ReviewSuccessful: Swift.Bool
  public var ReviewFailed: Swift.Bool
  public var showInstruction: Swift.Bool
  public var useZoomIdCheck: Swift.Bool
  public var skipCountrySelection: Swift.Bool
  public var skipDocumentOnboarding: Swift.Bool
  public var skipDocumentSelection: Swift.Bool
  public var skipSelfieWithLiveness: Swift.Bool
  public var nfcRequired: Swift.Bool
  public var checkUrjanet: Swift.Bool
  public var waitForStepUpload: Swift.Bool
  public var detectionTypes: [Swift.String]
  public var isSdkWhiteLabeled: Swift.Bool
  public var isSdkFullCustomization: Swift.Bool
  public var locate: Swift.String?
  public var autoCapture: Swift.Bool
  public var scanRef: Swift.String?
  public var questionnaireRequired: Swift.Bool
  public var environment: Swift.String?
  public struct Personalisation : Swift.Decodable {
    public var immediateRedirect: Swift.Bool
    public var showIdenfyWaterMark: Swift.Bool
    public var supportEmail: Swift.String?
    public var showPrivacyPolicy: Swift.Bool
    public var privacyPolicyViews: idenfycore.PrivacyPolicy?
    public init(from decoder: Swift.Decoder) throws
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc public enum IdenfyInstructionsEnum : Swift.Int {
  case drawer
  case dialog
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DocumentTypeEnum : Swift.String {
  case ID_CARD
  case PASSPORT
  case OTHER
  case DRIVER_LICENSE
  case RESIDENCE_PERMIT
  case VISA
  case BORDER_CROSSING
  case ASYLUM
  case NATIONAL_PASSPORT
  case INTERNATIONAL_PASSPORT
  case PROVISIONAL_DRIVER_LICENSE
  case VOTER_CARD
  case OLD_ID_CARD
  case TRAVEL_CARD
  case PHOTO_CARD
  case MILITARY_CARD
  case PROOF_OF_AGE_CARD
  case DIPLOMATIC_ID
  case PAN_CARD
  case AADHAAR
  public func getJSONValue() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class PrivacyPolicy : Swift.Codable {
  final public let en: Swift.String?, lt: Swift.String?, ru: Swift.String?, pl: Swift.String?, ro: Swift.String?, lv: Swift.String?, fr: Swift.String?, de: Swift.String?, it: Swift.String?, sv: Swift.String?, es: Swift.String?, bg: Swift.String?, et: Swift.String?, cs: Swift.String?, nl: Swift.String?, uk: Swift.String?, pt: Swift.String?, vi: Swift.String?
  public init(en: Swift.String, lt: Swift.String, ru: Swift.String, pl: Swift.String, ro: Swift.String, lv: Swift.String, fr: Swift.String, de: Swift.String, it: Swift.String, sv: Swift.String?, es: Swift.String?, bg: Swift.String?, et: Swift.String?, cs: Swift.String?, nl: Swift.String?, uk: Swift.String?, pt: Swift.String?, vi: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum IssuingCountrySkippedEnum : Swift.Int {
  case IssuingCountrySkipped
  case IssuingCountryNotSkipped
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ErrorResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Error {
  public var message: Swift.String?
  public var identifier: Swift.String?
  public var severity: Swift.String?
  required public init(message: Swift.String, identifier: Swift.String, severity: Swift.String)
  required public init(message: Swift.String, identifier: Swift.String)
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum Result<Value> {
  case success(Value)
  case failure(idenfycore.ErrorResponse)
}
@_hasMissingDesignatedInitializers public class RedirectURLResponse : Swift.Codable {
  public var redirectUrl: Swift.String?
  public var success: Swift.Bool?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class DocumentTypeClass {
  public var documentTypeData: idenfycore.DocumentTypeData
  public var currentStepInteger: Swift.Int
  public var stepsArray: [Swift.String]
  public var combinedStepsArray: [idenfycore.CombinedStep]
  public var originalStepsArray: [idenfycore.CombinedStep]
  public var basicSteps: [Swift.String]
  public init(documentTypeData: idenfycore.DocumentTypeData, steps: [idenfycore.CombinedStep], originalSteps: [idenfycore.CombinedStep], basicSteps: [Swift.String])
  public func getCurrentCombinedStep() -> idenfycore.CombinedStep
  public func setupValuesForRetakeSteps(steps: [Swift.String])
  public func getCurrentStep() -> Swift.String
  public func getNextStepInteger() -> Swift.Int
  public func increaseCurrentStep()
  public func dicreaseCurrentStep()
  public func getNextStep() -> Swift.String
  public func shouldNavigateToFaceView() -> Swift.Bool
  public func shouldNavigateToNFCView() -> Swift.Bool
  public func shouldNavigateToProviderLoginView() -> Swift.Bool
  public func shouldNavigateToDocScanning() -> Swift.Bool
  public func isThisStepIsLast() -> Swift.Bool
  public func isThisStepIsLastBasic() -> Swift.Bool
  public func shouldNavigateToDocumentsView() -> Swift.Bool
  public func shouldNavigateToResultsView() -> Swift.Bool
  public func isReadyToGoFaceSegue() -> Swift.Bool
  @objc deinit
}
public struct PhotoUploadResponseModel : Swift.Decodable {
  public let success: Swift.Bool
  public let canContinue: Swift.Bool
  public let errorMessage: idenfycore.ErrorMessage?
  public init(from decoder: Swift.Decoder) throws
}
public typealias DocumentType = [idenfycore.DocumentTypeElement]
@_hasMissingDesignatedInitializers public class DocumentTypeElement : Swift.Decodable {
  public var type: Swift.String
  public var steps: [Swift.String]
  public var additionalSteps: [Swift.String : idenfycore.AdditionalStep]
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public enum Step : Swift.String, Swift.Codable {
  case BACK
  case FACE
  case FRONT
  case UTILITY_BILL
  case PASSPORT_COVER
  case LIVENESS
  case SECOND_UTILITY_BILL
  case NFC
  case URJANET
  public static let allSteps: [idenfycore.Step]
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class CombinedStep {
  public var name: Swift.String
  public var texts: [Swift.String : [Swift.String : Swift.String]]?
  public var settings: [Swift.String : idenfycore.IdenfyDecodableValue]?
  public init(name: Swift.String, texts: [Swift.String : [Swift.String : Swift.String]]? = nil, settings: [Swift.String : idenfycore.IdenfyDecodableValue]? = nil)
  public static func getPosition(_ settings: [Swift.String : idenfycore.IdenfyDecodableValue]) -> Swift.Int
  public static func doAllStepsHavePositions(_ additionalSteps: [Swift.String : idenfycore.AdditionalStep]) -> Swift.Bool
  @objc deinit
}
public enum ErrorsFormatingEnum : Swift.String {
  case TOKEN_NOT_VALID_IDENTIFIER
  case MALFORMED_JSON_IDENTIFIER
  case IDENFY_SERVER_ERROR_IDENTIFIER
  case TOO_MANY_REATTEMPTS_IDENTIFIER
  case ASSERTION_ERROR_IDENTIFIER
  case FACE_LIVENESS_ERROR_IDENTIFIER
  case LIVENESS_SDK_NOT_INTEGRATED
  case NFC_REQUIRED_IDENTIFIER
  case NFC_FAILED_IDENTIFIER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.String {
  public func localized(_ lang: Swift.String? = nil, isCustomStrings _: Swift.Bool = true) -> Swift.String
}
@_hasMissingDesignatedInitializers public class NetworkRetryingUseCase {
  @objc deinit
}
@objc public class AuthenticationResultResponseOptionalDTO : ObjectiveC.NSObject, Swift.Codable {
  final public let processingStatus: Swift.String?, identificationStatus: Swift.String?
  public var errorMessage: idenfycore.ErrorMessage?
  final public let retakeSteps: idenfycore.RetakeSteps?
  final public let mrzFound: Swift.Bool, countryMatch: Swift.Bool, documentSupported: Swift.Bool, zoomLiveliness: Swift.Bool, manualReviewed: Swift.Bool, manualApproved: Swift.Bool, nfcRetry: Swift.Bool, nfcFailed: Swift.Bool
  final public let willBeManuallyReviewed: Swift.Bool?
  final public let attemptsLeft: Swift.Int
  final public let urjanetStatus: Swift.String?
  public init(retakeSteps: idenfycore.RetakeSteps?, processingStatus: Swift.String?, identificationStatus: Swift.String?, errorMessage: idenfycore.ErrorMessage?, mrzFound: Swift.Bool, countryMatch: Swift.Bool, documentSupported: Swift.Bool, zoomLiveliness: Swift.Bool, attemptsLeft: Swift.Int, manualReviewed: Swift.Bool, manualApproved: Swift.Bool, willBeManuallyReviewed: Swift.Bool?, nfcRetry: Swift.Bool, nfcFailed: Swift.Bool, urjanetStatus: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class ErrorMessage : Swift.Codable {
  final public let en: Swift.String, lt: Swift.String, ru: Swift.String, pl: Swift.String, ro: Swift.String, lv: Swift.String, fr: Swift.String, de: Swift.String, it: Swift.String
  final public let sv: Swift.String?, es: Swift.String?, bg: Swift.String?, et: Swift.String?, cs: Swift.String?, nl: Swift.String?, uk: Swift.String?, pt: Swift.String?, vi: Swift.String?
  public init(en: Swift.String, lt: Swift.String, ru: Swift.String, pl: Swift.String, ro: Swift.String, lv: Swift.String, fr: Swift.String, de: Swift.String, it: Swift.String, sv: Swift.String?, es: Swift.String?, bg: Swift.String?, et: Swift.String?, cs: Swift.String?, nl: Swift.String?, uk: Swift.String?, pt: Swift.String?, vi: Swift.String?)
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class RetakeSteps : Swift.Codable {
  final public let front: Swift.Bool?, back: Swift.Bool?, face: Swift.Bool?, urjanet: Swift.Bool?
  public init(front: Swift.Bool?, back: Swift.Bool?, face: Swift.Bool?, urjanet: Swift.Bool?)
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum SkipAnalysisEnum {
  case skip
  case notUsing
  case notSkip
  public func getSkipAnalysisRequestBody(_ documentData: Swift.String, _ documentStep: Swift.String) -> [Swift.String : Any?]
  public static func == (a: idenfycore.SkipAnalysisEnum, b: idenfycore.SkipAnalysisEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class NetworkRetryingStore {
  public var s3API: Swift.Bool
  public var currentRetryCount: Swift.Int
  public init(s3API: Swift.Bool)
  public func checkIfShouldRetryAgain() -> Swift.Bool
  @objc deinit
}
public class CountryCode : Swift.Codable {
  final public let country: Swift.String
  public init(country: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum NFCReadingFailedStatus : Swift.Int, Swift.Codable {
  case failed
  case timeOut
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public class NFCDataModel : Swift.Decodable {
  public var dg1: Swift.String
  public var dg2: Swift.String
  public var dg11: Swift.String
  public var dg12: Swift.String
  public var dg14: Swift.String
  public var dg15: Swift.String
  public var com: Swift.String
  public var sod: Swift.String
  public init(dg1: Swift.String, dg2: Swift.String, dg11: Swift.String, dg12: Swift.String, dg14: Swift.String, dg15: Swift.String, com: Swift.String, sod: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CoreConsts {
  public static let constDocScanningBunleVersion: Swift.String
  public static let maxNetworkRetryCount: Swift.Int
  public static let networkRetryDelayInSeconds: Swift.Double
  public static let networkRetryDelayWhenConnectionLostInSeconds: Swift.Double
  @objc deinit
}
@objc public enum IdenfyLocaleEnum : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case EN
  case LT
  case PL
  case RU
  case RO
  case LV
  case DE
  case FR
  case IT
  case ES
  case SV
  case BG
  case ET
  case CS
  case NL
  case UK
  case PT
  case VI
  public typealias RawValue = Swift.String
  public var rawValue: idenfycore.IdenfyLocaleEnum.RawValue {
    get
  }
  public init?(rawValue: idenfycore.IdenfyLocaleEnum.RawValue)
  public typealias AllCases = [idenfycore.IdenfyLocaleEnum]
  public static var allCases: [idenfycore.IdenfyLocaleEnum] {
    get
  }
}
public class DocumentTypeData {
  final public let documentTypeEnum: idenfycore.DocumentTypeEnum
  final public let nameUIViewModel: idenfycore.DocumentNameUIViewModel
  public init(_ documentTypeEnum: idenfycore.DocumentTypeEnum, _ nameUIViewModel: idenfycore.DocumentNameUIViewModel)
  @objc deinit
}
public enum RequestHTTPMethod : Swift.String {
  case get
  case post
  case put
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class CurrentStepUIViewModel {
  public var idenfyInstructionsEnum: idenfycore.IdenfyInstructionsEnum!
  public var documentCameraFrameRatio: CoreGraphics.CGFloat
  public var instructionsDrawerInformationTitle: Swift.String
  public var instructionsDrawerDescriptionLabel: Swift.String
  public var photoResultTitle: Swift.String
  public var photoResultDescription: Swift.String
  public var photoResultContinueButtonTitle: Swift.String
  public var photoResultChooseAnotherPhotoButtonTitle: Swift.String
  public var photoResultDetailsCardTitle: Swift.String
  public var photoResultDetailsSecondCardTitle: Swift.String
  public var isRectangleVisibleInCamera: Swift.Bool
  public init(_ documentCameraFrameRatio: CoreGraphics.CGFloat, _ instructionsDrawerDescriptionLabel: Swift.String, _ instructionsDrawerInformationTitle: Swift.String, _ idenfyInstructionsEnum: idenfycore.IdenfyInstructionsEnum, _ photoResultTitle: Swift.String, _ photoResultDescription: Swift.String, _ photoResultContinueButtonTitle: Swift.String, _ photoResultChooseAnotherPhotoButtonTitle: Swift.String, _ photoResultDetailsCardTitle: Swift.String, _ photoResultDetailsSecondCardTitle: Swift.String, _ isRectangleVisibleInCamera: Swift.Bool)
  @objc deinit
}
public class ErrorFormatingClass {
  public init(lang: Swift.String?)
  @objc deinit
  public func getIdenfyError() -> idenfycore.ErrorResponse
  public func getLocalizedErrorMessage(identifier: Swift.String) -> Swift.String
  public func updateLocale(locale: Swift.String)
  public static func getLocalizedServerErrorMessage(_ languageCode: Swift.String?, _ errorMessage: idenfycore.ErrorMessage?) -> Swift.String
}
extension UIKit.UIImage {
  public func rotateImage(radians: Swift.Float) -> UIKit.UIImage?
  public func cropToRectFace(rect: CoreGraphics.CGRect!) -> UIKit.UIImage?
  public func cropToRect(rect: CoreGraphics.CGRect!) -> UIKit.UIImage?
  public func croppedInRect(rect: CoreGraphics.CGRect) -> UIKit.UIImage
  public func rotate(_ radians: CoreGraphics.CGFloat) -> UIKit.UIImage
}
extension CoreGraphics.CGFloat {
  public func pixelsToPoints() -> CoreGraphics.CGFloat
  public static func onePixelInPoints() -> CoreGraphics.CGFloat
}
public enum IssuingCountryInPartnerInfo {
  case issuingCountryProvided(country: Swift.String)
  case issuingCountryNotProvided
}
public func == (lhs: idenfycore.IssuingCountryInPartnerInfo, rhs: idenfycore.IssuingCountryInPartnerInfo) -> Swift.Bool
public func != (lhs: idenfycore.IssuingCountryInPartnerInfo, rhs: idenfycore.IssuingCountryInPartnerInfo) -> Swift.Bool
public struct DocumentDataAfterAnalyzation : Swift.Decodable {
  public let documentType: Swift.String
  public let identificationSteps: [Swift.String]
  public let additionalSteps: [Swift.String : idenfycore.AdditionalStep]
  public let processingId: Swift.String
  public let frontProcessingId: Swift.String
  public let backProcessingId: Swift.String
  public init(_ documentType: Swift.String, _ identificationSteps: [Swift.String], _ additionalSteps: [Swift.String : idenfycore.AdditionalStep], _ processingId: Swift.String, _ frontProcessingId: Swift.String, _ backProcessingId: Swift.String)
  public init(from decoder: Swift.Decoder) throws
}
public class StatusClass {
  public var status: idenfycore.Status
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AdditionalStep : Swift.Decodable {
  public var texts: [Swift.String : [Swift.String : Swift.String]]?
  public var settings: [Swift.String : idenfycore.IdenfyDecodableValue]?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public struct CountryUtility {
  public static func getCountryCodeAlpha3(countryCodeAlpha2: Swift.String) -> Swift.String?
  public static func checkIfCountryISO3IsValids(_ countryCodeAlpha3: Swift.String) -> Swift.Bool
  public static func getLocalCountryCode() -> Swift.String?
  public static func getLocalCountry() -> Swift.String?
}
public struct DocumentDataAfterAnalyzationDTO : Swift.Decodable {
  public let documentType: Swift.String?
  public let identificationSteps: [Swift.String]?
  public let additionalSteps: [Swift.String : idenfycore.AdditionalStep]?
  public let processingId: Swift.String?
  public let frontProcessingId: Swift.String?
  public let backProcessingId: Swift.String?
  public init(_ documentType: Swift.String?, _ identificationSteps: [Swift.String]?, _ additionalSteps: [Swift.String : idenfycore.AdditionalStep]?, _ processingId: Swift.String?, _ frontProcessingId: Swift.String?, _ backProcessingId: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class IdenfyUtils {
  public static func resized(_ image: UIKit.UIImage, withPercentage percentage: CoreGraphics.CGFloat) -> UIKit.UIImage?
  public static func statusBarHeight() -> CoreGraphics.CGFloat
  public static func convertImageToBase64(image: UIKit.UIImage) -> Swift.String
  public static func convertBase64StringToImage(_ imageBase64String: Swift.String) -> UIKit.UIImage?
  public static func cropFaceImage(_ image: UIKit.UIImage, topHeight: CoreGraphics.CGFloat, bottomHeight: CoreGraphics.CGFloat) -> UIKit.UIImage
  public static func cropImageWithoutRectangle(_ image: UIKit.UIImage, topHeight: CoreGraphics.CGFloat, bottomHeight: CoreGraphics.CGFloat) -> UIKit.UIImage
  public static func cropImage(_ image: UIKit.UIImage, ratio: CoreGraphics.CGFloat, margin: CoreGraphics.CGFloat) -> UIKit.UIImage
  public static func imageRotatedByDegrees(_ image: UIKit.UIImage, degrees: CoreGraphics.CGFloat) -> UIKit.UIImage
  public static func fixedOrientation(_ image: UIKit.UIImage) -> UIKit.UIImage
  public static func getImageV1(name: Swift.String) -> UIKit.UIImage
  public static func getImageV1(legacyName: Swift.String, name: Swift.String) -> UIKit.UIImage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IdenfyVoid : Swift.Decodable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class IdenfyLivenessCheckRequestBody : ObjectiveC.NSObject, Swift.Codable {
  final public let auditTrail: [Swift.String]
  final public let lowQualityAuditTrailImage: Swift.String
  final public let faceMap: Swift.String
  final public let authToken: Swift.String
  public var sessionToken: Swift.String!
  public var attempt: Swift.Int!
  required public init(auditTrails: [Swift.String], lowQualityAuditTrailImage: Swift.String, faceMap: Swift.String, authToken: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case auditTrail
    case faceMap
    case sessionToken
    case authToken
    case lowQualityAuditTrailImage
    case attempt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension idenfycore.Status : Swift.Equatable {}
extension idenfycore.Status : Swift.Hashable {}
extension idenfycore.EnvironmentEnum : Swift.Equatable {}
extension idenfycore.EnvironmentEnum : Swift.Hashable {}
extension idenfycore.EnvironmentEnum : Swift.RawRepresentable {}
extension idenfycore.IdenfyInstructionsEnum : Swift.Equatable {}
extension idenfycore.IdenfyInstructionsEnum : Swift.Hashable {}
extension idenfycore.IdenfyInstructionsEnum : Swift.RawRepresentable {}
extension idenfycore.DocumentTypeEnum : Swift.Equatable {}
extension idenfycore.DocumentTypeEnum : Swift.Hashable {}
extension idenfycore.DocumentTypeEnum : Swift.RawRepresentable {}
extension idenfycore.IssuingCountrySkippedEnum : Swift.Equatable {}
extension idenfycore.IssuingCountrySkippedEnum : Swift.Hashable {}
extension idenfycore.IssuingCountrySkippedEnum : Swift.RawRepresentable {}
extension idenfycore.Step : Swift.Equatable {}
extension idenfycore.Step : Swift.Hashable {}
extension idenfycore.Step : Swift.RawRepresentable {}
extension idenfycore.ErrorsFormatingEnum : Swift.Equatable {}
extension idenfycore.ErrorsFormatingEnum : Swift.Hashable {}
extension idenfycore.ErrorsFormatingEnum : Swift.RawRepresentable {}
extension idenfycore.SkipAnalysisEnum : Swift.Equatable {}
extension idenfycore.SkipAnalysisEnum : Swift.Hashable {}
extension idenfycore.NFCReadingFailedStatus : Swift.Equatable {}
extension idenfycore.NFCReadingFailedStatus : Swift.Hashable {}
extension idenfycore.NFCReadingFailedStatus : Swift.RawRepresentable {}
extension idenfycore.IdenfyLocaleEnum : Swift.Equatable {}
extension idenfycore.IdenfyLocaleEnum : Swift.Hashable {}
extension idenfycore.IdenfyLocaleEnum : Swift.RawRepresentable {}
extension idenfycore.RequestHTTPMethod : Swift.Equatable {}
extension idenfycore.RequestHTTPMethod : Swift.Hashable {}
extension idenfycore.RequestHTTPMethod : Swift.RawRepresentable {}
extension idenfycore.IdenfyLivenessCheckRequestBody.CodingKeys : Swift.Equatable {}
extension idenfycore.IdenfyLivenessCheckRequestBody.CodingKeys : Swift.Hashable {}
extension idenfycore.IdenfyLivenessCheckRequestBody.CodingKeys : Swift.RawRepresentable {}
